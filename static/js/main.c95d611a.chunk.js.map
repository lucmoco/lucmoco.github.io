{"version":3,"sources":["Auth/AuthState.ts","Auth/Auth.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SuccessStatus","ErrorStatus","oAuth2Client","OAuth2Client","clientId","redirectUri","window","location","origin","transporter","configure","scope","setAuthInfoIfNeeded","currentInfo","newInfo","status","Error","errorMessage","Auth","props","setAuthInfo","authInfo","useLocation","pathname","urlSearchParams","URLSearchParams","search","codeParam","get","state","localStorage","setItem","href","CodeReceived","codeVerifier","getItem","code","Authenticated","AuthRequired","a","generateCodeVerifierAsync","codes","authorizeUrl","generateAuthUrl","code_challenge","codeChallenge","code_challenge_method","CodeChallengeMethod","S256","login_hint","NoMatch","App","React","useState","undefined","className","to","path","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAAYA,EAMAC,E,yHANAD,K,4BAAAA,E,4BAAAA,E,+BAAAA,M,cAMAC,K,eAAAA,M,KCDZ,IAAMC,EAAe,IAAIC,eAAa,CACpCC,SAAU,2EACVC,YAAY,GAAD,OAAKC,OAAOC,SAASC,UAGlCN,EAAaO,YAAYC,YAEzB,IAAMC,EAAQ,CACZ,mDACA,yCAQF,SAASC,EAAoBC,EAAmCC,GAC9D,OAAKD,EAIDA,EAAYE,SAAWd,EAAYe,OAASF,EAAQC,SAAWd,EAAYe,MACtEH,EAAYI,eAAiBH,EAAQG,aAAeJ,EAAcC,EAGpED,EAAYE,SAAWD,EAAQC,OAASF,EAAcC,EAPpDA,EAUJ,SAASI,EAAKC,GAA+C,IAC1DC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,SACjBd,EAAWe,cAEf,GAA0B,UAAtBf,EAASgB,SAAsB,CAGjC,IAAMC,EAAkB,IAAIC,gBAAgBnB,OAAOC,SAASmB,QACxDC,EAAYH,EAAgBI,IAAI,QAChCC,EAAQL,EAAgBI,IAAI,SAChC,IAAKD,EAEH,OADAP,EAAYR,EAAoBS,EAAU,CAAEN,OAAQd,EAAYe,MAAOC,aAAc,kCAC9E,KAGTa,aAAaC,QAAQ,YAAaJ,GAClCrB,OAAOC,SAASyB,KAAOH,GAAS,IAEhCT,EAAYR,EAAoBS,EAAU,CAAEN,OAAQf,EAAciC,oBAC7D,CAGL,IAAIC,EAAeJ,aAAaK,QAAQ,qBACpCC,EAAON,aAAaK,QAAQ,aAChC,GAAID,GAAgBE,EAIlB,OADAhB,EAAYR,EAAoBS,EAAU,CAAEN,OAAQf,EAAcqC,iBAC3D,KAKTjB,EAAYR,EAAoBS,EAAU,CAAEN,OAAQf,EAAcsC,gBAElE,sBAAC,8BAAAC,EAAA,sEACqBrC,EAAasC,4BADlC,OACOC,EADP,OAECX,aAAaC,QAAQ,oBAAqBU,EAAMP,cAE1CQ,EAAexC,EAAayC,gBAAgB,CAChDhC,QACAiC,eAAgBH,EAAMI,cACtBC,sBAAuBC,sBAAoBC,KAC3CC,WAAY,oBACZpB,MAAOtB,EAASgB,WAElBjB,OAAOC,SAASyB,KAAOU,EAXxB,0CAAD,GAeF,OAAO,KCnET,SAASQ,IACP,IAAI3C,EAAWe,cAEf,OACE,0DACmBf,EAASgB,SAD5B,SAMJ,IA+Be4B,EA/BO,WAAO,IAAD,EACIC,IAAMC,cAA+BC,GADzC,mBACrBjC,EADqB,KACXD,EADW,KAE1B,OACE,kBAAC,IAAD,KACE,yBAAKmC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,QACA,kBAACtC,EAAD,CAAME,YAAaA,EAAaC,SAAUA,IAC1C,uDAA6BA,GAAYA,EAASN,QACjDM,GAAYA,EAASN,SAAWd,EAAYe,OAAS,wCAAcK,EAASJ,aAAvB,KACtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,KAAK,QAAQC,OAAK,GAAzB,kBAGA,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAK,GAArB,QAGA,kBAAC,IAAD,CAAOD,KAAK,QAAQC,OAAK,GAAzB,aAGA,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAACP,EAAD,YCrCMS,QACW,cAA7BrD,OAAOC,SAASqD,UAEe,UAA7BtD,OAAOC,SAASqD,UAEhBtD,OAAOC,SAASqD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c95d611a.chunk.js","sourcesContent":["export enum SuccessStatus {\r\n  AuthRequired = \"AuthRequired\",\r\n  CodeReceived = \"CodeReceived\",\r\n  Authenticated = \"Authenticated\",\r\n}\r\n\r\nexport enum ErrorStatus {\r\n  Error = \"Error\",\r\n}\r\n\r\nexport interface AuthInfoSuccess {\r\n  status: SuccessStatus;\r\n}\r\n\r\nexport interface AuthInfoError {\r\n  status: ErrorStatus;\r\n  errorMessage: string;\r\n}\r\n\r\nexport type AuthInfo = AuthInfoSuccess | AuthInfoError;","import React from 'react';\r\nimport { OAuth2Client, CodeChallengeMethod } from 'google-auth-library';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { AuthInfo, SuccessStatus, ErrorStatus } from './AuthState';\r\n\r\nconst oAuth2Client = new OAuth2Client({\r\n  clientId: \"186913784324-m1t1kuq00ppjb91tfgon8sid139dm7sd.apps.googleusercontent.com\",\r\n  redirectUri: `${window.location.origin}`,\r\n});\r\n\r\noAuth2Client.transporter.configure()\r\n\r\nconst scope = [\r\n  'https://www.googleapis.com/auth/userinfo.profile',\r\n  'https://www.googleapis.com/auth/drive'\r\n];\r\n\r\nexport interface AuthProps {\r\n  authInfo: AuthInfo | undefined;\r\n  setAuthInfo: (authInfo: AuthInfo) => void;\r\n}\r\n\r\nfunction setAuthInfoIfNeeded(currentInfo: AuthInfo | undefined, newInfo: AuthInfo): AuthInfo {\r\n  if (!currentInfo) {\r\n    return newInfo;\r\n  }\r\n\r\n  if (currentInfo.status === ErrorStatus.Error && newInfo.status === ErrorStatus.Error) {\r\n    return currentInfo.errorMessage === newInfo.errorMessage ? currentInfo : newInfo;\r\n  }\r\n\r\n  return currentInfo.status === newInfo.status ? currentInfo : newInfo;\r\n}\r\n\r\nexport function Auth(props: AuthProps) : React.ReactElement | null {\r\n  const { setAuthInfo, authInfo } = props;\r\n  let location = useLocation();\r\n\r\n  if (location.pathname === \"/auth\") {\r\n    /* We got an authentication code back from Google */\r\n\r\n    const urlSearchParams = new URLSearchParams(window.location.search);\r\n    var codeParam = urlSearchParams.get(\"code\");\r\n    var state = urlSearchParams.get(\"state\");\r\n    if (!codeParam) {\r\n      setAuthInfo(setAuthInfoIfNeeded(authInfo, { status: ErrorStatus.Error, errorMessage: \"'code' parameter is missing.\" }));\r\n      return null;\r\n    }\r\n\r\n    localStorage.setItem(\"auth-code\", codeParam);\r\n    window.location.href = state || \"/\"; // TODO: redirect to the original URL\r\n\r\n    setAuthInfo(setAuthInfoIfNeeded(authInfo, { status: SuccessStatus.CodeReceived }));\r\n  } else {\r\n    /* Normal page */\r\n\r\n    var codeVerifier = localStorage.getItem(\"auth-codeVerifier\");\r\n    var code = localStorage.getItem(\"auth-code\");\r\n    if (codeVerifier && code) {\r\n      /* The user is already authenticated. */\r\n\r\n      setAuthInfo(setAuthInfoIfNeeded(authInfo, { status: SuccessStatus.Authenticated }));\r\n      return null;\r\n    }\r\n\r\n    /* The user is not yet authenticated */\r\n\r\n    setAuthInfo(setAuthInfoIfNeeded(authInfo, { status: SuccessStatus.AuthRequired }));\r\n\r\n    (async () => {\r\n      const codes = await oAuth2Client.generateCodeVerifierAsync();\r\n      localStorage.setItem(\"auth-codeVerifier\", codes.codeVerifier);\r\n      \r\n      const authorizeUrl = oAuth2Client.generateAuthUrl({\r\n        scope,\r\n        code_challenge: codes.codeChallenge,\r\n        code_challenge_method: CodeChallengeMethod.S256,\r\n        login_hint: \"lucmoco@gmail.com\",\r\n        state: location.pathname,\r\n      });\r\n      window.location.href = authorizeUrl;\r\n    })();\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// const x = async () => {\r\n//   console.log(\"getting token...\");\r\n//   const response = await oAuth2Client.getToken({\r\n//     code: code!,\r\n//     codeVerifier: localStorage.getItem(\"codeVerifier\")!,\r\n//   });\r\n//   console.log(\"Credentials: \", response);\r\n//   oAuth2Client.setCredentials(response.tokens);\r\n// }\r\n\r\n// export async function getData() {\r\n//   console.log(\"executing x...\");\r\n//   await x();\r\n//   console.log(\"retrieving access token...\");\r\n//   var token = await oAuth2Client.getAccessToken();\r\n//   console.log(\"retrieved access token\", token);\r\n\r\n//   /* get parent folder */\r\n\r\n//   const parentFolderQuery = new URLSearchParams({\r\n//     q: \"'root' in parents and mimeType = 'application/vnd.google-apps.folder' and name = 'notes-perso-boussole'\",\r\n//     fields: \"files/id\",\r\n//   });\r\n\r\n//   const parentFolderResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${parentFolderQuery}` });\r\n//   var parentFolderId = (parentFolderResponse.data as any).files[0].id;\r\n\r\n//   /* get file id */\r\n\r\n//   const fileQuery = new URLSearchParams({\r\n//     q: `'${parentFolderId}' in parents and name = 'notes.json'`,\r\n//     fields: \"files/id\",\r\n//   });\r\n\r\n//   const fileResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${fileQuery}` });\r\n//   var fileId = (fileResponse.data as any).files[0].id;\r\n\r\n//   /* get file content */\r\n\r\n//   var fileContent = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media` });\r\n//   return fileContent.data as string;\r\n// }","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  Link\n} from \"react-router-dom\";\n\nimport { Auth } from './Auth/Auth';\nimport { AuthInfo, ErrorStatus } from './Auth/AuthState';\n\n/*getData().then(data => {\n  console.log(\"data retrieved\", data);\n});*/\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <>\n      Invalid path: « {location.pathname} »\n    </>\n  );\n}\n\nconst App: React.FC = () => {\n  var [authInfo, setAuthInfo] = React.useState<AuthInfo | undefined>(undefined);\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/page\">Page</Link>\n          <Auth setAuthInfo={setAuthInfo} authInfo={authInfo} />\n          <div>Authentication Status: {authInfo && authInfo.status}</div>\n          {authInfo && authInfo.status === ErrorStatus.Error && <div>Error: \"{authInfo.errorMessage}\"</div>}\n          <Switch>\n            <Route path=\"/auth\" exact>\n              Authentication\n            </Route>\n            <Route path=\"/\" exact>\n              Home\n            </Route>\n            <Route path=\"/page\" exact>\n              Some page\n            </Route>\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}