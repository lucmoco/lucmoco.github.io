{"version":3,"sources":["Auth/Auth.ts","Auth/UseAuthHook.ts","Services/DataStore.ts","Components/Page/Page.tsx","Components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["scope","window","boussoleAuthManager","oAuth2Client","OAuth2Client","clientId","redirectUri","location","origin","state","listeners","setState","forEach","listener","subscribe","push","unsubscribe","index","indexOf","splice","getState","getOAuth2Client","this","transporter","configure","urlSearchParams","URLSearchParams","hash","accessToken","get","originalPage","console","debug","status","setCredentials","access_token","localStorage","setItem","history","replaceState","getItem","a","authorizeUrl","generateAuthUrl","login_hint","pathname","response_type","href","authManager","useAuth","useState","React","useEffect","getData","parentFolderQuery","q","fields","request","url","parentFolderResponse","parentFolderId","data","files","id","fileQuery","fileResponse","fileId","fileContent","Page","setData","NoMatch","useLocation","App","authInfo","errorMessage","className","to","path","exact","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64aa2a72.chunk.js","sourcesContent":["import { AuthState } from './AuthState';\r\nimport { OAuth2Client, CodeChallengeMethod } from 'google-auth-library';\r\n\r\nconst scope = [\r\n  'https://www.googleapis.com/auth/userinfo.profile',\r\n  'https://www.googleapis.com/auth/drive'\r\n];\r\n\r\nexport type AuthStateListener = (state: AuthState) => void;\r\n\r\nclass AuthManager {\r\n  private readonly oAuth2Client = new OAuth2Client({\r\n    //clientId: \"186913784324-6bjkvt7jsn309m5shsc7n33c7u516hq2.apps.googleusercontent.com\", // ios\r\n    clientId: \"186913784324-548k2j5jsqlht13qhu2miegr42fu0v56.apps.googleusercontent.com\", // web\r\n    //clientSecret: \"DLlvK1azW1Y4Wxq3zZHAHws_\",\r\n    redirectUri: `${window.location.origin}`,\r\n  });\r\n\r\n  private state: AuthState;\r\n  private listeners: AuthStateListener[] = [];\r\n\r\n  public constructor() {\r\n    this.oAuth2Client.transporter.configure()\r\n\r\n    const urlSearchParams = new URLSearchParams(window.location.hash);\r\n    var accessToken = urlSearchParams.get(\"access_token\");\r\n\r\n    if (accessToken != null) {\r\n      /* We got an access token back from Google */\r\n\r\n      const originalPage = urlSearchParams.get(\"state\");\r\n\r\n      console.debug(\"Auth: TokenReceived\");\r\n      this.state = { status: 'TokenReceived' };\r\n\r\n      this.oAuth2Client.setCredentials({ access_token: accessToken });\r\n      localStorage.setItem(\"access_token\", accessToken);\r\n\r\n      window.history.replaceState(null, \"\", originalPage);\r\n      this.setState({ status: 'Authenticated' });\r\n    } else {\r\n      accessToken = localStorage.getItem(\"access_token\");\r\n      if (accessToken) {\r\n        this.oAuth2Client.setCredentials({ access_token: accessToken });\r\n        this.state = { status: 'Authenticated' };\r\n      } else {\r\n        /* The user is not yet authenticated. Generate a code verifier and redirect the user to Google authentication */\r\n        console.debug(\"Auth: RedirectingToGoogle\");\r\n        this.state = { status: 'AuthenticationNeeded' };\r\n\r\n        (async () => {\r\n          // redirect the user to Google authentication\r\n          const authorizeUrl = this.oAuth2Client.generateAuthUrl({\r\n            scope,\r\n            login_hint: \"lucmoco@gmail.com\",\r\n            state: window.location.pathname,\r\n            response_type: \"token\",\r\n          });\r\n\r\n          window.location.href = authorizeUrl;\r\n        })()\r\n      }\r\n    }\r\n  }\r\n\r\n  private setState = (state: AuthState) => {\r\n    this.state = state;\r\n    this.listeners.forEach(listener => listener(state));\r\n  }\r\n\r\n  public subscribe = (listener: AuthStateListener) => {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  public unsubscribe = (listener: AuthStateListener) => {\r\n    const index = this.listeners.indexOf(listener);\r\n    if (index > -1) {\r\n      this.listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  public getState = (): AuthState => this.state;\r\n\r\n  public getOAuth2Client = (): OAuth2Client => {\r\n    return this.oAuth2Client;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface Window { boussoleAuthManager?: AuthManager; }\r\n}\r\n\r\nif (!window.boussoleAuthManager) {\r\n  window.boussoleAuthManager = new AuthManager();\r\n};\r\n\r\nconst authManager = window.boussoleAuthManager;\r\n\r\nexport function getAuthState() {\r\n  return authManager.getState();\r\n}\r\n\r\nexport function subscribe(listener: AuthStateListener): () => void {\r\n  authManager.subscribe(listener);\r\n  return () => {\r\n    authManager.unsubscribe(listener);\r\n  };\r\n}\r\n\r\nexport function getOAuth2Client(): OAuth2Client {\r\n  return authManager.getOAuth2Client();\r\n}","import React from \"react\";\r\nimport { AuthState } from \"./AuthState\";\r\nimport { useState } from \"react\";\r\nimport { getAuthState, subscribe } from \"./Auth\";\r\n\r\nexport function useAuth(): AuthState {\r\n  const [state, setState] = useState(getAuthState());\r\n\r\n  React.useEffect(() => {\r\n    subscribe(setState);\r\n  }, []);\r\n\r\n  return state;\r\n}\r\n","import { getOAuth2Client } from \"../Auth/Auth\";\r\n\r\nexport async function getData() {\r\n  var oAuth2Client = getOAuth2Client();\r\n\r\n  /* get parent folder */\r\n\r\n  const parentFolderQuery = new URLSearchParams({\r\n    q: \"'root' in parents and mimeType = 'application/vnd.google-apps.folder' and name = 'notes-perso-boussole'\",\r\n    fields: \"files/id\",\r\n  });\r\n\r\n  const parentFolderResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${parentFolderQuery}` });\r\n  var parentFolderId = (parentFolderResponse.data as any).files[0].id;\r\n\r\n  /* get file id */\r\n\r\n  const fileQuery = new URLSearchParams({\r\n    q: `'${parentFolderId}' in parents and name = 'notes.json'`,\r\n    fields: \"files/id\",\r\n  });\r\n\r\n  const fileResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${fileQuery}` });\r\n  var fileId = (fileResponse.data as any).files[0].id;\r\n\r\n  /* get file content */\r\n\r\n  var fileContent = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media` });\r\n  return fileContent.data as string;\r\n}","import React, { useEffect } from \"react\";\r\nimport { getData } from \"../../Services/DataStore\";\r\n\r\nexport function Page() {\r\n  const [data, setData] = React.useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      setData(await getData());\r\n    })();\r\n  })\r\n\r\n  return <div>Page content: {data}</div>;\r\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n  Link\n} from \"react-router-dom\";\n\nimport { useAuth } from '../../Auth/UseAuthHook';\nimport { Page } from '../Page/Page';\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <>\n      Invalid path: Â« {location.pathname} Â»\n    </>\n  );\n}\n\nconst App: React.FC = () => {\n  var authInfo = useAuth();\n\n  if (authInfo.status === 'Error') {\n    return <div>Authentication failed: \"{authInfo.errorMessage}\"</div>\n  }\n\n  if (authInfo.status === 'AuthenticationNeeded') {\n    return <div>Auth required. AuthenticationNeeded...</div>\n  }\n\n  if (authInfo.status === 'TokenReceived') {\n    return <div>TokenReceived...</div>\n  }\n\n  // authInfo.status == 'Authenticated'\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/page\">Page</Link>\n          <div>Authentication Status: {authInfo && authInfo.status}</div>\n          <Page />\n          <Switch>\n            <Route path=\"/auth\" exact>\n              Authentication\n            </Route>\n            <Route path=\"/\" exact>\n              Home\n            </Route>\n            <Route path=\"/page\" exact>\n              Some page\n            </Route>\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}