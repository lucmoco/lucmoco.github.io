{"version":3,"sources":["Components/Tasks/Tasks.module.scss","Components/Utility/Dialog/Dialog.module.scss","Components/IconDesigner/IconDesigner.module.scss","Components/Utility/Button/Button.module.scss","Components/Utility/Field/Field.module.scss","Components/App/App.module.scss","Components/Utility/Overlay/Overlay.module.scss","Components/Utility/Spacing.module.scss","Components/ErrorBoundary/ErrorBoundary.tsx","Helpers/guidHelper.ts","AppState/Tasks/service.ts","Auth/AuthManager.ts","DataStore/DataStore.ts","ParticleState/ParticleState.ts","AppState/Tasks/hooks.tsx","Helpers/cssHelper.ts","Helpers/textHerlper.ts","Components/Tasks/TaskState/TaskStateIndicator.tsx","Components/Utility/Overlay/Overlay.tsx","Components/Utility/Button/Button.tsx","Components/Utility/Dialog/Dialog.tsx","Components/Tasks/TaskState/TaskStateChoice.tsx","Components/Tasks/TaskState/TaskStateEditionDialog.tsx","Components/Utility/Field/Field.tsx","Components/Tasks/TaskForm.tsx","Components/Tasks/TaskEditionDialog.tsx","Components/Tasks/TaskComponent.tsx","Components/App/PageLayout.tsx","Assets/FilterImage.tsx","Components/Tasks/TaskFilter.tsx","Components/Tasks/TaskList.tsx","Components/IconDesigner/IconPreview.tsx","Components/IconDesigner/IconDesigner.tsx","Components/App/AppComponent.tsx","serviceWorker.ts","index.tsx","Components/App/App.tsx"],"names":["module","exports","ErrorBoundary","props","state","isError","error","errorInfo","this","setState","componentStack","children","React","getUniqueDigits","length","result","i","charAt","Math","floor","random","newState","dateClosed","Date","undefined","TaskService","store","getTasks","getState","setTasks","tasks","createTask","task","updateState","id","now","created","modified","updateTask","updates","Error","scopes","AuthManager","account","application","PublicClientApplication","auth","clientId","authority","handleRedirectPromise","accounts","getAllAccounts","loginRedirect","authenticate","acquireTokenSilent","authResult","accessToken","DataStore","authManager","acquireToken","fetch","headers","Authorization","response","json","storeModel","getAppState","data","getStoreModel","method","body","JSON","stringify","appState","taskId","push","title","description","forEach","storeTask","getTask","ParticleState","callbacks","notify","updateFunc","subscribe","callback","indexOf","filter","c","TasksContext","createContext","TaskServiceContext","SaveStatusContext","Tasks","dataStore","taskStore","useState","taskService","useMemo","saveStatus","useRef","setSaveStatus","onModelChange","useCallback","model","current","modelBeingSaved","modelToSave","a","saveData","useEffect","useAutoSaver","Provider","value","TasksProvider","setTaskStore","loadData","useTaskService","useContext","getClasses","args","name","join","getStateLabel","TaskStateIndicator","showText","showCurrentBorder","showNotCurrent","onClick","className","styles","taskStateIndicator","small","thickBorder","notCurrent","clickable","event","stopPropagation","Overlay","overlay","Button","isLight","isWide","button","light","wide","Dialog","buttons","dialog","content","map","onclick","text","TaskStateChoice","onChange","renderState","buttonState","spacingStyles","spaceOutVerticalComponents","taskStateClosed","TaskStateEditionDialog","onClose","Field","label","field","TaskForm","type","target","TaskEditionDialog","editedTask","setEditedTask","TaskComponent","taskEditDialogOpen","setTaskEditDialogOpen","stateEditDialogOpen","setStateEditDialogOpen","PageLayout","headerControls","to","FilterImage","viewBox","d","fill","strokeWidth","strokeLinecap","strokeLinejoin","strokeMiterlimit","TaskFilter","visible","textChanged","tasksFilter","tasksFilterInner","taskFilterText","ev","getStateOrder","compare","task1","task2","localeCompare","TaskList","filterVisible","setFilterVisible","filterText","setFilterText","newTaskFormOpen","setNewTaskFormOpen","height","width","stroke","taskList","Object","keys","sort","toLowerCase","includes","sortAndFilterTasks","key","tasksButtons","IconPreview","svg","size","iconPreview","dangerouslySetInnerHTML","__html","style","IconDesigner","svgValue","setSvgValue","iconDesigner","NoMatch","location","useLocation","pathname","AppComponent","app","path","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca4dd963.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"Tasks_taskList__1j01R\",\"tasksFilter\":\"Tasks_tasksFilter__SByHK\",\"visible\":\"Tasks_visible__2gUcH\",\"tasksFilterInner\":\"Tasks_tasksFilterInner__37v1d\",\"taskFilterText\":\"Tasks_taskFilterText__1lomt\",\"tasks\":\"Tasks_tasks__4y0vu\",\"tasksButtons\":\"Tasks_tasksButtons__XJ-pN\",\"task\":\"Tasks_task__3bw5D\",\"title\":\"Tasks_title__1CtZZ\",\"taskForm\":\"Tasks_taskForm__oi8da\",\"button\":\"Tasks_button__25aul\",\"taskStateIndicator\":\"Tasks_taskStateIndicator__3zudG\",\"notCurrent\":\"Tasks_notCurrent__21dv8\",\"clickable\":\"Tasks_clickable__fAQfc\",\"thickBorder\":\"Tasks_thickBorder__3vSP1\",\"small\":\"Tasks_small__eHZhy\",\"created\":\"Tasks_created__3OKBO\",\"in-backlog\":\"Tasks_in-backlog__1cBRA\",\"active\":\"Tasks_active__c-6hh\",\"finished\":\"Tasks_finished__dGaVL\",\"abandoned\":\"Tasks_abandoned__-2J94\",\"taskStateClosed\":\"Tasks_taskStateClosed__2ySBA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2jZTN\",\"title\":\"Dialog_title__1r951\",\"content\":\"Dialog_content__3EOpS\",\"buttons\":\"Dialog_buttons__1OnQ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"iconDesigner\":\"IconDesigner_iconDesigner__FdLiT\",\"iconPreview\":\"IconDesigner_iconPreview__2680x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button___qM3V\",\"wide\":\"Button_wide__3ejWw\",\"light\":\"Button_light__2KPpW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"Field_field__1UM57\",\"label\":\"Field_label__2F_cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__32N6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Overlay_overlay__3WkJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spaceOutVerticalComponents\":\"Spacing_spaceOutVerticalComponents__x2Ed8\"};","import * as React from 'react';\n\ninterface IErrorBoundaryState {\n  isError: boolean;\n  error: React.ErrorInfo | null;\n}\n\nexport class ErrorBoundary extends React.Component<{}, IErrorBoundaryState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { isError: false, error: null };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n    this.setState({ isError: true, error: errorInfo });\n  }\n\n  render(): any {\n    if (this.state.isError) {\n      return <div>{this.state.error!.componentStack}</div>;\n    }\n\n    return this.props.children;\n  }\n}\n","const Digits = '0123456789abcdef';\n\nfunction getUniqueDigits(length: number) {\n  var result = '';\n  for (var i = 0; i < length; i++) {\n    result += Digits.charAt(Math.floor(Math.random() * Digits.length));\n  }\n  return result;\n}\n\nexport function newGuid() {\n  return `${getUniqueDigits(8)}-${getUniqueDigits(4)}-${getUniqueDigits(4)}-${getUniqueDigits(4)}-${getUniqueDigits(\n    12\n  )}`;\n}\n","import { newGuid } from '../../Helpers/guidHelper';\nimport { IParticleState } from '../../ParticleState/IParticleState';\nimport { Task, TaskState, TaskModel } from './model';\n\nexport const getNewTask = (): Task => ({\n  id: '',\n  state: 'created',\n  title: '',\n  description: '',\n  created: new Date(),\n  modified: new Date(),\n});\n\nexport const newState = (state: TaskState): Partial<Task> => {\n  return {\n    state,\n    dateClosed: state === 'finished' || state === 'abandoned' ? new Date() : undefined,\n  };\n};\n\nexport type ITaskStore = IParticleState<TaskModel>;\n\nexport interface ITaskService {\n  createTask: (task: Task) => void;\n  updateTask: (id: string, task: Partial<Task>) => void;\n  getTasks(): TaskModel;\n  setTasks(tasks: TaskModel): void;\n}\n\nexport class TaskService implements ITaskService {\n  private store: ITaskStore;\n\n  constructor(store: ITaskStore) {\n    this.store = store;\n  }\n\n  public getTasks = () => this.store.getState();\n\n  public setTasks = (tasks: TaskModel) => this.store.setState(tasks);\n\n  public createTask = (task: Task) => {\n    this.store.updateState((tasks) => {\n      const id = newGuid();\n      const now = new Date();\n      tasks[id] = {\n        ...task,\n        id,\n        created: now,\n        modified: now,\n      };\n      return { ...tasks };\n    });\n  };\n\n  public updateTask = (id: string, updates: Partial<Task>) => {\n    this.store.updateState((tasks) => {\n      var task = tasks[id];\n      if (!task) throw new Error(`No task found with id {id}`);\n      tasks[id] = {\n        ...task,\n        ...updates,\n      };\n      return { ...tasks };\n    });\n  };\n}\n","import { IAuthManager } from './IAuthManager';\r\nimport { PublicClientApplication, AccountInfo } from '@azure/msal-browser';\r\n\r\nconst scopes = ['https://graph.microsoft.com/Files.ReadWrite'];\r\n\r\nexport class AuthManager implements IAuthManager {\r\n  account: AccountInfo | undefined;\r\n\r\n  readonly application = new PublicClientApplication({\r\n    auth: {\r\n      clientId: 'c1fef6c7-2dd3-425b-aa1e-e9c94ca00c63',\r\n      authority: 'https://login.microsoftonline.com/consumers/',\r\n    },\r\n  });\r\n\r\n  async authenticate() {\r\n    await this.application.handleRedirectPromise();\r\n    var accounts = this.application.getAllAccounts();\r\n\r\n    if (accounts.length === 0) {\r\n      // a login is needed. The page execution will stop here.\r\n      await this.application.loginRedirect();\r\n    }\r\n\r\n    this.account = accounts[0];\r\n  }\r\n\r\n  async acquireToken() {\r\n    await this.authenticate();\r\n\r\n    var authResult = await this.application.acquireTokenSilent({\r\n      scopes,\r\n      account: this.account!,\r\n    });\r\n    return authResult.accessToken;\r\n  }\r\n}\r\n\r\nexport const getAuthManager = (): IAuthManager => {\r\n  return new AuthManager();\r\n};\r\n","import { IDataStore } from './IDataStore';\nimport { IAuthManager } from '../Auth/IAuthManager';\nimport { TaskModel, Task } from '../AppState/Tasks/model';\nimport { StoreTask, DataStoreModel } from './DataStoreModel';\n\nexport class DataStore implements IDataStore {\n  readonly authManager: IAuthManager;\n\n  public constructor(authManager: IAuthManager) {\n    this.authManager = authManager;\n  }\n\n  async loadData() {\n    var accessToken = await this.authManager.acquireToken();\n\n    var response = await fetch(\n      'https://graph.microsoft.com/v1.0/me/drive/root:/boussole-data-files/notes.json:/content',\n      { headers: { Authorization: 'Bearer ' + accessToken } }\n    );\n\n    var storeModel = await response.json();\n    return getAppState(storeModel);\n  }\n\n  async saveData(data: TaskModel) {\n    var storeModel = getStoreModel(data);\n    var accessToken = await this.authManager.acquireToken();\n\n    await fetch('https://graph.microsoft.com/v1.0/me/drive/root:/boussole-data-files/notes.json:/content', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'text/plain',\n        Authorization: 'Bearer ' + accessToken,\n      },\n      body: JSON.stringify(storeModel, null, '  '),\n    });\n  }\n}\n\n// *** Conversion from Appliation Model to Data Store Model and vice versa ***\n\nfunction getStoreTask(task: Task): StoreTask {\n  return {\n    state: task.state === 'created' ? undefined : task.state,\n    id: task.id,\n    title: task.title,\n    description: task.description || undefined,\n    created: task.created,\n    modified: task.modified,\n    dateClosed: task.dateClosed,\n  };\n}\n\nfunction getStoreModel(appState: TaskModel): DataStoreModel {\n  const tasks: StoreTask[] = [];\n  for (const taskId in appState) {\n    tasks.push(getStoreTask(appState[taskId]));\n  }\n\n  return { tasks };\n}\n\nfunction getTask(storeTask: StoreTask): Task {\n  return {\n    state: storeTask.state || 'created',\n    id: storeTask.id,\n    title: storeTask.title,\n    description: storeTask.description || '',\n    created: storeTask.created,\n    modified: storeTask.modified,\n    dateClosed: storeTask.dateClosed,\n  };\n}\n\nfunction getAppState(storeModel: DataStoreModel): TaskModel {\n  const tasks: TaskModel = {};\n\n  storeModel.tasks.forEach((storeTask) => (tasks[storeTask.id] = getTask(storeTask)));\n\n  return tasks;\n}\n","import { IParticleState, ParticleStateListener } from './IParticleState';\n\nexport const toto = 'tutu';\n\nexport class ParticleState<TState> implements IParticleState<TState> {\n  private state: TState;\n  private callbacks: ParticleStateListener<TState>[];\n\n  constructor(state: TState) {\n    this.state = state;\n    this.callbacks = [];\n  }\n\n  public getState = () => this.state;\n\n  public setState = (state: TState) => {\n    this.state = state;\n    this.notify();\n  };\n\n  public updateState = (updateFunc: (state: TState) => TState) => {\n    var newState = updateFunc(this.state);\n    if (newState !== this.state) {\n      this.state = newState;\n      this.notify();\n    }\n  };\n\n  public subscribe = (callback: ParticleStateListener<TState>) => {\n    if (this.callbacks.indexOf(callback) >= 0) {\n      throw new Error('The callback is already registered.');\n    }\n\n    this.callbacks.push(callback);\n\n    return () => {\n      this.callbacks = this.callbacks.filter((c) => c !== callback);\n    };\n  };\n\n  private notify = () => {\n    var state = this.state;\n    for (var callback of this.callbacks) {\n      if (this.state !== state) {\n        // a callback has updated the state again. The next callbacks are not called, all callbacks will be called with the new value.\n        return;\n      }\n\n      if (this.callbacks.indexOf(callback) < 0) {\n        // the callback has been removed in a callback.\n        continue;\n      }\n\n      callback(state);\n    }\n  };\n}\n","import React from 'react';\nimport { TaskModel, SaveStatus } from './model';\nimport { ITaskService, TaskService, ITaskStore } from './service';\nimport { AuthManager } from '../../Auth/AuthManager';\nimport { DataStore } from '../../DataStore/DataStore';\nimport { ParticleState } from '../../ParticleState/ParticleState';\nimport { IDataStore } from '../../DataStore/IDataStore';\n\nconst TasksContext = React.createContext<TaskModel>(undefined as any);\nconst TaskServiceContext = React.createContext<ITaskService>(undefined as any);\nconst SaveStatusContext = React.createContext<SaveStatus>(undefined as any);\n\ntype AutoSaverState = {\n  // the model being saved. Undefined if no model needs to be saved.\n  modelBeingSaved?: TaskModel;\n  // A model queued to be saved, if a save operation is already ongoing (modelBeingSaved is thus not undefined), undefined otherwise.\n  modelToSave?: TaskModel;\n};\n\nconst useAutoSaver = (dataStore: IDataStore, taskStore: ITaskStore): SaveStatus => {\n  const state = React.useRef<AutoSaverState>({});\n  const [saveStatus, setSaveStatus] = React.useState<SaveStatus>('all-saved');\n\n  const onModelChange = React.useCallback(\n    (model: TaskModel) => {\n      if (state.current.modelBeingSaved) {\n        // a save operation is already ongoing. Queue the model to be saved, overwriting an older version already queued (if any).\n        state.current.modelToSave = model;\n        return;\n      }\n\n      (async () => {\n        state.current = { modelBeingSaved: model };\n        setSaveStatus('saving');\n        await dataStore.saveData(model);\n\n        while (state.current.modelToSave) {\n          state.current = { modelBeingSaved: model };\n          await dataStore.saveData(model);\n        }\n\n        state.current = {};\n        setSaveStatus('all-saved');\n      })();\n    },\n    [dataStore]\n  );\n\n  React.useEffect(() => taskStore.subscribe(onModelChange), [taskStore, onModelChange]);\n  return saveStatus;\n};\n\ninterface ITasksProps {\n  dataStore: IDataStore;\n  taskStore: ITaskStore;\n}\n\nconst Tasks: React.FC<ITasksProps> = ({ dataStore, taskStore, children }) => {\n  const [tasks, setTasks] = React.useState<TaskModel>(taskStore.getState());\n  const taskService = React.useMemo(() => new TaskService(taskStore), [taskStore]);\n  const saveStatus = useAutoSaver(dataStore, taskStore);\n\n  React.useEffect(() => taskStore.subscribe(setTasks), [taskStore]);\n\n  return (\n    <TasksContext.Provider value={tasks}>\n      <TaskServiceContext.Provider value={taskService}>\n        <SaveStatusContext.Provider value={saveStatus}>{children}</SaveStatusContext.Provider>\n      </TaskServiceContext.Provider>\n    </TasksContext.Provider>\n  );\n};\n\n/** Maintains the task state and the data store. Ensures authentication. */\nexport const TasksProvider: React.FC = ({ children }) => {\n  const authManager = React.useMemo(() => new AuthManager(), []);\n  const dataStore = React.useMemo(() => new DataStore(authManager), [authManager]);\n  const [taskStore, setTaskStore] = React.useState<ITaskStore | undefined>(undefined);\n\n  React.useEffect(() => {\n    (async () => {\n      const data = await dataStore.loadData();\n      const store = new ParticleState<TaskModel>(data);\n      setTaskStore(store);\n    })();\n  }, [dataStore]);\n\n  if (!taskStore) {\n    return null;\n  }\n\n  return (\n    <Tasks dataStore={dataStore} taskStore={taskStore}>\n      {children}\n    </Tasks>\n  );\n};\n\nexport const useTasks = () => React.useContext(TasksContext);\nexport const useTaskService = () => React.useContext(TaskServiceContext);\nexport const useSaveStatus = () => React.useContext(SaveStatusContext);\n","export const getClasses = (...args: (string | null | undefined | false)[]): string => {\n  return args.filter((name) => !!name).join(' ');\n};\n","import { TaskState } from '../AppState/Tasks/model';\n\nexport const getStateLabel = (state: TaskState): string => {\n  switch (state) {\n    case 'created':\n      return 'En attente';\n    case 'in-backlog':\n      return 'Dans le radar';\n    case 'active':\n      return 'En cours';\n    case 'finished':\n      return 'Terminée';\n    case 'abandoned':\n      return 'Abandonnée';\n  }\n};\n","import React from 'react';\nimport styles from '../Tasks.module.scss';\nimport { getClasses } from '../../../Helpers/cssHelper';\nimport { TaskState } from '../../../AppState/Tasks/model';\nimport { getStateLabel } from '../../../Helpers/textHerlper';\n\nexport type TaskStateDisplayProps = {\n  /** State to be rendered. */\n  state: TaskState;\n  /** Show the text. */\n  showText?: boolean;\n  /** Display a thick border. */\n  showCurrentBorder?: boolean;\n  /** Display an attenuated color. */\n  showNotCurrent?: boolean;\n  /** Display as a button and call onClick when clicked. If undefined, the control is not clickable. */\n  onClick?: () => void;\n};\n\n/** Shows a task state as a rectangle, with a background color corresponding to the state, and optionally the state's text label. */\nexport const TaskStateIndicator: React.FC<TaskStateDisplayProps> = ({\n  state,\n  showText,\n  showCurrentBorder,\n  showNotCurrent,\n  onClick,\n}) => {\n  return (\n    <div\n      title={showText ? undefined : getStateLabel(state)}\n      className={getClasses(\n        styles.taskStateIndicator,\n        styles[state],\n        !showText && styles.small,\n        showCurrentBorder && styles.thickBorder,\n        showNotCurrent && styles.notCurrent,\n        onClick && styles.clickable\n      )}\n      onClick={\n        onClick\n          ? (event) => {\n              event.stopPropagation();\n              onClick();\n            }\n          : undefined\n      }\n    >\n      {showText && getStateLabel(state)}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport styles from './Overlay.module.scss';\n\nexport const Overlay: FunctionComponent<{}> = ({ children }) => {\n  return <div className={styles.overlay}>{children}</div>;\n};\n","import React, { FunctionComponent } from 'react';\nimport styles from './Button.module.scss';\nimport { getClasses } from '../../../Helpers/cssHelper';\n\nexport interface ButtonProps {\n  isLight?: boolean;\n  isWide?: boolean;\n  title?: string;\n  onClick?: () => void;\n}\n\nexport const Button: FunctionComponent<ButtonProps> = ({ isLight, isWide, title, onClick, children }) => {\n  return (\n    <div\n      className={getClasses(styles.button, isLight && styles.light, isWide && styles.wide)}\n      title={title}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport styles from './Dialog.module.scss';\nimport { Overlay } from '../Overlay/Overlay';\nimport { Button } from '../Button/Button';\n\nexport interface ButtonProps {\n  text: string;\n  onclick: () => void;\n}\n\nexport interface DialogProps {\n  title?: string;\n  buttons?: ButtonProps[];\n}\n\nexport const Dialog: FunctionComponent<DialogProps> = ({ title, buttons, children }) => {\n  return (\n    <Overlay>\n      <div className={styles.dialog}>\n        {title && <div className={styles.title}>{title}</div>}\n        <div className={styles.content}>{children}</div>\n        {buttons && (\n          <div className={styles.buttons}>\n            {buttons.map((button) => (\n              <Button isWide onClick={button.onclick}>\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        )}\n      </div>\n    </Overlay>\n  );\n};\n","import React from 'react';\nimport styles from '../Tasks.module.scss';\nimport spacingStyles from '../../Utility/Spacing.module.scss';\nimport { TaskState } from '../../../AppState/Tasks/model';\nimport { TaskStateIndicator } from './TaskStateIndicator';\n\nexport type TaskStateChoiceProps = {\n  state: TaskState;\n  onChange: (state: TaskState) => void;\n};\n\n/** Shows all possible task states and enables selecting a state. */\nexport const TaskStateChoice: React.FC<TaskStateChoiceProps> = ({ state, onChange }) => {\n  const renderState = React.useCallback(\n    (buttonState: TaskState) => {\n      return (\n        <TaskStateIndicator\n          state={buttonState}\n          showText\n          showCurrentBorder={buttonState === state}\n          showNotCurrent={buttonState !== state}\n          onClick={\n            buttonState === state\n              ? undefined\n              : () => {\n                  onChange(buttonState);\n                }\n          }\n        />\n      );\n    },\n    [state, onChange]\n  );\n\n  return (\n    <div className={spacingStyles.spaceOutVerticalComponents}>\n      {renderState('created')}\n      {renderState('in-backlog')}\n      {renderState('active')}\n      <div className={styles.taskStateClosed}>\n        {renderState('finished')}\n        {renderState('abandoned')}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TaskState } from '../../../AppState/Tasks/model';\nimport { Dialog } from '../../Utility/Dialog/Dialog';\nimport { TaskStateChoice } from './TaskStateChoice';\n\nexport type TaskStateEditionDialogProps = {\n  /** The task to be rendered. */\n  state: TaskState;\n  /** Triggered when the task is being clicked. */\n  onClose: (state?: TaskState) => void;\n};\n\n/** Edition of a task's state, displays all possible states. */\nexport const TaskStateEditionDialog: React.FunctionComponent<TaskStateEditionDialogProps> = ({ state, onClose }) => {\n  return (\n    <Dialog\n      buttons={[\n        {\n          text: 'Annuler',\n          onclick: () => {\n            onClose();\n          },\n        },\n      ]}\n    >\n      <TaskStateChoice state={state} onChange={onClose} />\n    </Dialog>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport styles from './Field.module.scss';\n\nexport interface FieldProps {\n  label: string;\n}\n\nexport const Field: FunctionComponent<FieldProps> = ({ label, children }) => {\n  return (\n    <div className={styles.field}>\n      <div className={styles.label}>{label}</div>\n      <div>{children}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TaskStateChoice } from './TaskState/TaskStateChoice';\nimport { Field } from '../Utility/Field/Field';\nimport { newState } from '../../AppState/Tasks/service';\nimport { Task } from '../../AppState/Tasks/model';\n\nexport type TaskFormProps = {\n  task: Task;\n  onChange: (task: Task) => void;\n};\n\nexport const TaskForm: React.FC<TaskFormProps> = ({ task, onChange }) => {\n  return (\n    <>\n      <TaskStateChoice state={task.state} onChange={(state) => onChange({ ...task, ...newState(state) })} />\n      <Field label=\"titre\">\n        <input type=\"text\" value={task.title} onChange={(event) => onChange({ ...task, title: event.target.value })} />\n      </Field>\n      <Field label=\"description\">\n        <textarea\n          value={task.description}\n          onChange={(event) => onChange({ ...task, description: event.target.value })}\n        />\n      </Field>\n    </>\n  );\n};\n","import React, { useState, useMemo } from 'react';\nimport { useTaskService } from '../../AppState/Tasks/hooks';\nimport { getNewTask } from '../../AppState/Tasks/service';\nimport { Task } from '../../AppState/Tasks/model';\nimport { Dialog } from '../Utility/Dialog/Dialog';\nimport { TaskForm } from './TaskForm';\n\nexport type TaskEditionDialogProps = {\n  task: Task | undefined;\n  onClose: () => void;\n};\n\nexport function TaskEditionDialog(props: TaskEditionDialogProps) {\n  const id = useMemo(() => (props.task ? props.task.id : undefined), [props.task]);\n  const [editedTask, setEditedTask] = useState<Task>(props.task || getNewTask());\n  const { createTask, updateTask } = useTaskService();\n\n  const onSave = () => {\n    if (id) {\n      updateTask(id, editedTask);\n    } else {\n      createTask(editedTask);\n    }\n    props.onClose();\n  };\n\n  return (\n    <Dialog\n      title={id ? 'Modifier une tâche' : 'Nouvelle tâche'}\n      buttons={[\n        { text: 'Valider', onclick: onSave },\n        { text: 'Annuler', onclick: props.onClose },\n      ]}\n    >\n      <TaskForm task={editedTask} onChange={setEditedTask} />\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport styles from './Tasks.module.scss';\nimport { useTaskService } from '../../AppState/Tasks/hooks';\nimport { newState } from '../../AppState/Tasks/service';\nimport { Task } from '../../AppState/Tasks/model';\nimport { TaskStateIndicator } from './TaskState/TaskStateIndicator';\nimport { TaskStateEditionDialog } from './TaskState/TaskStateEditionDialog';\nimport { TaskEditionDialog } from './TaskEditionDialog';\n\nexport type TaskComponentProps = {\n  /** The task to be rendered. */\n  task: Task;\n};\n\n/** Renders a single task in the list of tasks. */\nexport const TaskComponent: React.FunctionComponent<TaskComponentProps> = ({ task }) => {\n  const { updateTask } = useTaskService();\n  const [taskEditDialogOpen, setTaskEditDialogOpen] = React.useState(false);\n  const [stateEditDialogOpen, setStateEditDialogOpen] = React.useState(false);\n\n  return (\n    <>\n      <div onClick={() => setTaskEditDialogOpen(true)} className={styles.task}>\n        <div className={styles.title}>{task.title}</div>\n        <TaskStateIndicator state={task.state} onClick={() => setStateEditDialogOpen(true)} />\n      </div>\n      {taskEditDialogOpen && <TaskEditionDialog task={task} onClose={() => setTaskEditDialogOpen(false)} />}\n      {stateEditDialogOpen && (\n        <TaskStateEditionDialog\n          state={task.state}\n          onClose={(state) => {\n            setStateEditDialogOpen(false);\n            if (state) updateTask(task.id, newState(state));\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSaveStatus } from '../../AppState/Tasks/hooks';\n\ntype PageLayoutProps = {\n  /** optional header controls to be rendered */\n  headerControls?: React.ReactElement;\n};\n\n/** renders a header with various buttons and the children as the content */\nexport const PageLayout: React.FunctionComponent<PageLayoutProps> = ({ headerControls, children }) => {\n  var saveStatus = useSaveStatus();\n\n  return (\n    <>\n      <header>\n        <Link to=\"/home\">Home</Link>\n        <Link to=\"/tasks\">Tâches</Link>\n        {/* <Button onClick={() => fetchData(false)} isLight={true} title=\"Recharger les données\">\n          <img src={reload} alt=\"Recharger les données\" />\n        </Button> */}\n        {headerControls}\n        {saveStatus}|\n      </header>\n      <section>{children}</section>\n    </>\n  );\n};\n","import React from 'react';\nexport const FilterImage = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg {...props} viewBox=\"0 0 10 10\">\n    <path\n      d=\"M 0.25,1.5 4.25,6 v 3.75 H 5.75 V 6 l 4,-4.5 v -1.25 l -9.5,0 z\"\n      fill=\"none\"\n      strokeWidth={0.5}\n      strokeLinecap=\"butt\"\n      strokeLinejoin=\"miter\"\n      strokeMiterlimit={4}\n    />\n  </svg>\n);\n","import React from 'react';\nimport styles from './Tasks.module.scss';\nimport { getClasses } from '../../Helpers/cssHelper';\n\ntype TaskFilterProps = {\n  visible: boolean;\n  text: string;\n  textChanged: (text: string) => void;\n};\n\nexport const TaskFilter: React.FunctionComponent<TaskFilterProps> = ({ visible, text, textChanged }) => {\n  return (\n    <div className={getClasses(styles.tasksFilter, visible && styles.visible)}>\n      <div className={styles.tasksFilterInner}>\n        <input className={styles.taskFilterText} value={text} onChange={(ev) => textChanged(ev.target.value)} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './Tasks.module.scss';\nimport { TaskComponent } from './TaskComponent';\nimport { TaskEditionDialog } from './TaskEditionDialog';\nimport { useTasks } from '../../AppState/Tasks/hooks';\nimport { TaskModel, Task, TaskState } from '../../AppState/Tasks/model';\nimport { Button } from '../Utility/Button/Button';\nimport { PageLayout } from '../App/PageLayout';\nimport { FilterImage } from '../../Assets/FilterImage';\nimport { TaskFilter } from './TaskFilter';\n\nfunction getStateOrder(state: TaskState): number {\n  switch (state) {\n    case 'active':\n      return 0;\n    case 'in-backlog':\n      return 1;\n    case 'created':\n      return 2;\n    case 'finished':\n      return 3;\n    case 'abandoned':\n      return 4;\n  }\n}\n\nfunction compare(task1: Task, task2: Task): number {\n  if (task1.state !== task2.state) {\n    return getStateOrder(task1.state) < getStateOrder(task2.state) ? -1 : 1;\n  }\n\n  // both tasks have the same state\n\n  return task1.title.localeCompare(task2.title);\n}\n\nfunction sortAndFilterTasks(tasks: TaskModel, text: string): Task[] {\n  var result = Object.keys(tasks)\n    .map((id) => tasks[id])\n    .sort(compare);\n\n  if (text) {\n    text = text.toLowerCase();\n    result = result.filter(\n      (task) => task.title.toLowerCase().includes(text) || task.description.toLowerCase().includes(text)\n    );\n  }\n\n  return result;\n}\n\n/** page with the list of tasks, a filter, a \"new task\" button and an edition dialog, if needed. */\nexport function TaskList() {\n  var tasks = useTasks();\n  const [filterVisible, setFilterVisible] = React.useState<boolean>(false);\n  const [filterText, setFilterText] = React.useState<string>('');\n  const [newTaskFormOpen, setNewTaskFormOpen] = React.useState(false);\n\n  /*React.useEffect(() => {\n    (async () => {\n      try {\n        setData(await getData());\n      } catch (error) {\n        setData(error.toString());\n      }\n    })();\n  }, []);*/\n\n  return (\n    <PageLayout\n      headerControls={\n        <Button onClick={() => setFilterVisible(!filterVisible)} isLight={true} title=\"Filtrer\">\n          <FilterImage height={20} width={20} stroke=\"white\" />\n        </Button>\n      }\n    >\n      <div className={styles.taskList}>\n        <TaskFilter visible={filterVisible} text={filterText} textChanged={setFilterText} />\n        <div className={styles.tasks}>\n          {sortAndFilterTasks(tasks, filterVisible ? filterText : '').map((task) => (\n            <TaskComponent key={task.id} task={task} />\n          ))}\n        </div>\n        <div className={styles.tasksButtons}>\n          <Button isWide onClick={() => setNewTaskFormOpen(true)}>\n            +\n          </Button>\n        </div>\n        {newTaskFormOpen && <TaskEditionDialog task={undefined} onClose={() => setNewTaskFormOpen(false)} />}\n      </div>\n    </PageLayout>\n  );\n}\n","import React from 'react';\nimport styles from './IconDesigner.module.scss';\n\nexport interface IIconPreviewProps {\n  svg: string;\n  size: number;\n}\n\nexport const IconPreview: React.FunctionComponent<IIconPreviewProps> = ({ svg, size }) => {\n  return (\n    <div className={styles.iconPreview}>\n      <div\n        dangerouslySetInnerHTML={{ __html: svg }}\n        style={{\n          height: size,\n          width: size,\n        }}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './IconDesigner.module.scss';\nimport { IconPreview } from './IconPreview';\n\nexport const IconDesigner: React.FunctionComponent = () => {\n  var [svgValue, setSvgValue] = React.useState('');\n\n  return (\n    <div className={styles.iconDesigner}>\n      <textarea value={svgValue} onChange={(ev) => setSvgValue(ev.target.value)} />\n      <IconPreview svg={svgValue} size={200} />\n      <IconPreview svg={svgValue} size={100} />\n      <IconPreview svg={svgValue} size={50} />\n      <IconPreview svg={svgValue} size={32} />\n      <IconPreview svg={svgValue} size={25} />\n    </div>\n  );\n};\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { Switch, Route, useLocation, Redirect } from 'react-router-dom';\nimport { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary';\nimport { TaskList } from '../Tasks/TaskList';\nimport { PageLayout } from './PageLayout';\nimport { IconDesigner } from '../IconDesigner/IconDesigner';\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return <>Invalid path: « {location.pathname} »</>;\n}\n\nexport const AppComponent = () => {\n  return (\n    <div className={styles.app}>\n      <ErrorBoundary>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/tasks\" />\n          </Route>\n          <Route path=\"/home\" exact>\n            <PageLayout>\n              Home page\n              <IconDesigner />\n            </PageLayout>\n          </Route>\n          <Route path=\"/tasks\" exact>\n            <TaskList />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </ErrorBoundary>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// window.addEventListener('beforeunload', (event) => {\n//   // Cancel the event as stated by the standard.\n//   event.preventDefault();\n//   // Chrome requires returnValue to be set.\n//   event.returnValue = '';\n// });\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { AppComponent } from './AppComponent';\nimport { TasksProvider } from '../../AppState/Tasks/hooks';\n\nexport const App: React.FC = () => {\n  return (\n    <TasksProvider>\n      <Router>\n        <AppComponent />\n      </Router>\n    </TasksProvider>\n  );\n};\n"],"sourceRoot":""}