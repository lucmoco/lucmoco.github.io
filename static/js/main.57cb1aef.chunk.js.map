{"version":3,"sources":["logo.svg","Auth.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","oAuth2Client","OAuth2Client","clientId","redirectUri","code","URLSearchParams","window","location","search","get","console","log","authorizeUrl","generateAuthUrl","scope","href","x","a","getToken","response","setCredentials","tokens","getAccessToken","token","request","url","res","data","getData","then","App","className","src","logo","alt","target","rel","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,qVCErCC,EAAe,I,OAAIC,cAAa,CACpCC,SAAU,2EACVC,YAAa,2BAIXC,EADoB,IAAIC,gBAAgBC,OAAOC,SAASC,QACjCC,IAAI,QAE/B,IAAKL,EAAM,CACTM,QAAQC,IAAI,kCACZ,IAAMC,EAAeZ,EAAaa,gBAAgB,CAChDC,MAAO,CAAC,mDAAoD,2CAE9DR,OAAOC,SAASQ,KAAOH,EAGzBF,QAAQC,IAAI,8BAA+BP,GAC3C,IAAMY,EAAC,uCAAG,4BAAAC,EAAA,6DACRP,QAAQC,IAAI,oBADJ,SAEeX,EAAakB,SAASd,GAFrC,OAEFe,EAFE,OAGRT,QAAQC,IAAI,gBAAiBQ,GAC7BnB,EAAaoB,eAAeD,EAASE,QAJ7B,2CAAH,qD,4CAOA,8BAAAJ,EAAA,6DACLP,QAAQC,IAAI,kBADP,SAECK,IAFD,cAGLN,QAAQC,IAAI,8BAHP,SAIaX,EAAasB,iBAJ1B,cAIDC,EAJC,OAKLb,QAAQC,IAAI,yBAA0BY,GAE1B,4CAPP,UAQavB,EAAawB,QAAQ,CAAEC,IAD7B,8CAPP,eAQCC,EARD,yBASEA,EAAIC,MATN,6C,uBAAA,WAAP,gCCpBAC,GAAUC,MAAK,SAAAF,GACbjB,QAAQC,IAAI,iBAAkBgB,MAGhC,IAqBeG,EArBO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVhB,KAAK,sBACLoB,OAAO,SACPC,IAAI,uBAJN,kBCNYC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.57cb1aef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import { OAuth2Client } from 'google-auth-library';\r\n\r\nconst oAuth2Client = new OAuth2Client({\r\n  clientId: \"186913784324-m1t1kuq00ppjb91tfgon8sid139dm7sd.apps.googleusercontent.com\",\r\n  redirectUri: \"https://localhost:3000\"\r\n});\r\n\r\nconst urlSearchParams = new URLSearchParams(window.location.search);\r\nvar code = urlSearchParams.get(\"code\");\r\n\r\nif (!code) {\r\n  console.log(\"No code yet. Retrieving one...\");\r\n  const authorizeUrl = oAuth2Client.generateAuthUrl({\r\n    scope: ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/drive'],\r\n  });\r\n  window.location.href = authorizeUrl;\r\n}\r\n\r\nconsole.log(\"A code has been retrieved: \", code);\r\nconst x = async () => {\r\n  console.log(\"getting token...\");\r\n  const response = await oAuth2Client.getToken(code!);\r\n  console.log(\"Credentials: \", response);\r\n  oAuth2Client.setCredentials(response.tokens);\r\n}\r\n\r\nexport async function getData() {\r\n  console.log(\"executing x...\");\r\n  await x();\r\n  console.log(\"retrieving access token...\");\r\n  var token = await oAuth2Client.getAccessToken();\r\n  console.log(\"retrieved access token\", token);\r\n\r\n  const url = 'https://www.googleapis.com/drive/v2/files';\r\n  const res = await oAuth2Client.request({ url });\r\n  return res.data;\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { getData } from './Auth';\n\ngetData().then(data => {\n  console.log(\"data retrieved\", data);\n});\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}