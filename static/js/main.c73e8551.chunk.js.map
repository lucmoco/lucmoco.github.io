{"version":3,"sources":["Helpers/guidHelper.ts","Store/tasks.ts","Auth/Auth.ts","Services/DataStore.ts","Store/store.ts","Store/dataStorage.ts","Auth/UseAuthHook.ts","Components/ErrorBoundary/ErrorBoundary.tsx","Components/AuthStatus/AuthStatus.tsx","Components/Tasks/TaskComponent.tsx","Components/Utility/Button/Button.tsx","Components/Tasks/TaskForm.tsx","Components/Tasks/TaskList.tsx","Components/App/AppComponent.tsx","serviceWorker.ts","index.tsx","Components/App/App.tsx"],"names":["Digits","getUniqueDigits","length","result","i","charAt","Math","floor","random","createTask","tasks","task","id","scope","window","boussoleAuthManager","oAuth2Client","OAuth2Client","clientId","redirectUri","location","origin","state","listeners","setState","forEach","listener","subscribe","push","unsubscribe","index","indexOf","splice","getState","getOAuth2Client","authenticate","console","debug","status","a","authorizeUrl","generateAuthUrl","login_hint","pathname","search","hash","response_type","href","this","transporter","configure","urlSearchParams","URLSearchParams","substr","accessToken","get","originalPage","Error","expiresIn","expiration","Date","setSeconds","getSeconds","parseInt","setCredentials","access_token","localStorage","setItem","toISOString","history","replaceState","accessTokenInfo","getItem","accessTokenInfoParts","split","getTime","authManager","getData","fileId","parentFolderQuery","q","fields","request","url","parentFolderResponse","parentFolderId","data","files","fileQuery","fileResponse","fileContent","combinedReducers","combineReducers","title","action","type","updates","updateTask","dataStorage","model","reducer","undefined","error","dataStorageReducer","createStore","reduxCreateStore","applyMiddleware","thunk","useAuth","useState","React","useEffect","ErrorBoundary","props","isError","errorInfo","componentStack","children","getExpirationString","secondsToExpiration","round","AuthStatus","authState","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","className","onClick","TaskComponent","Button","TaskForm","useMemo","editedTask","setEditedTask","dispatch","useDispatch","useTaskService","value","onChange","event","target","onClose","TaskList","useSelector","isOpen","taskForm","setTaskForm","Object","keys","map","key","taskId","NoMatch","useLocation","AppComponent","fetchData","thunkDispatch","useFetchData","errorMessage","to","path","exact","Boolean","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c73e8551.chunk.js","sourcesContent":["const Digits = '0123456789abcdef';\r\n\r\nfunction getUniqueDigits(length: number) {\r\n  var result = '';\r\n  for (var i = 0; i < length; i++) {\r\n    result += Digits.charAt(Math.floor(Math.random() * Digits.length));\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function newGuid() {\r\n  return `${getUniqueDigits(8)}-${getUniqueDigits(4)}-${getUniqueDigits(4)}-${getUniqueDigits(4)}-${getUniqueDigits(12)}`;\r\n}\r\n","import { TaskNoId, Task } from \"../Model/model\";\r\nimport { Action, StoreAction } from './store';\r\nimport { newGuid } from \"../Helpers/guidHelper\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Dispatch } from \"react\";\r\n\r\n// *** Model ***\r\n\r\nexport interface TaskModel {\r\n  [id: string]: Task;\r\n}\r\n\r\n// *** Actions ***\r\n\r\ninterface UpdateTaskAction extends Action {\r\n  type: \"UpdateTask\";\r\n  id: string;\r\n  task: Partial<TaskNoId>;\r\n}\r\n\r\ninterface CreateTaskAction extends Action {\r\n  type: \"CreateTask\";\r\n  task: TaskNoId;\r\n}\r\n\r\nexport type TaskActions = UpdateTaskAction | CreateTaskAction;\r\n\r\n// *** Reducer ***\r\n\r\nfunction updateTask(tasks: TaskModel, id: string, updates: Partial<TaskNoId>) {\r\n  var task = tasks[id];\r\n\r\n  if (!task) throw new Error(`No task found with id {id}`);\r\n\r\n  tasks[id] = {\r\n    ...task,\r\n    ...updates,\r\n  };\r\n\r\n  return { ...tasks };\r\n}\r\n\r\nfunction createTask(tasks: TaskModel, task: TaskNoId) {\r\n  const id = newGuid();\r\n\r\n  tasks[id] = {\r\n    ...task,\r\n    id\r\n  };\r\n\r\n  return { ...tasks };\r\n}\r\n\r\nexport function taskReducer(tasks: TaskModel = {\r\n  \"asdf\": { id: \"asdf\", title: \"asdf\" },\r\n  \"toto\": { id: \"toto\", title: \"toto\" },\r\n}, action: StoreAction) {\r\n  switch (action.type) {\r\n    case \"UpdateTask\": return updateTask(tasks, action.id, action.task);\r\n    case \"CreateTask\": return createTask(tasks, action.task);\r\n    default: return tasks;\r\n  }\r\n}\r\n\r\n// *** Service ***\r\n\r\nexport interface TaskService {\r\n  createTask: (task: TaskNoId) => void;\r\n  updateTask: (id: string, task: Partial<TaskNoId>) => void;\r\n}\r\n\r\nexport function useTaskService(): TaskService {\r\n  const dispatch = useDispatch<Dispatch<TaskActions>>();\r\n\r\n  return {\r\n    createTask: task => dispatch({ type: \"CreateTask\", task }),\r\n    updateTask: (id, task) => dispatch({ type: \"UpdateTask\", id, task }),\r\n  };\r\n}\r\n","import { AuthState } from './AuthState';\r\nimport { OAuth2Client } from 'google-auth-library';\r\n\r\nconst scope = [\r\n  'https://www.googleapis.com/auth/userinfo.profile',\r\n  'https://www.googleapis.com/auth/drive'\r\n];\r\n\r\nexport type AuthStateListener = (state: AuthState) => void;\r\n\r\nclass AuthManager {\r\n  private readonly oAuth2Client = new OAuth2Client({\r\n    clientId: \"186913784324-548k2j5jsqlht13qhu2miegr42fu0v56.apps.googleusercontent.com\",\r\n    redirectUri: `${window.location.origin}`,\r\n  });\r\n\r\n  private state: AuthState;\r\n  private listeners: AuthStateListener[] = [];\r\n\r\n  public constructor() {\r\n    this.oAuth2Client.transporter.configure()\r\n\r\n    const urlSearchParams = new URLSearchParams(window.location.hash.substr(1));\r\n    var accessToken = urlSearchParams.get(\"access_token\");\r\n\r\n    if (accessToken != null) {\r\n      /* We got an access token back from Google */\r\n\r\n      const originalPage = urlSearchParams.get(\"state\");\r\n      if (!originalPage) {\r\n        throw new Error(\"missing originalPage field.\");\r\n      }\r\n\r\n      const expiresIn = urlSearchParams.get(\"expires_in\");\r\n      if (!expiresIn) {\r\n        throw new Error(\"missing expires_in field.\");\r\n      }\r\n\r\n      const expiration = new Date();\r\n      expiration.setSeconds(expiration.getSeconds() + parseInt(expiresIn));\r\n\r\n      console.debug(\"Auth: TokenReceived\");\r\n      this.state = { status: 'TokenReceived' };\r\n\r\n      this.oAuth2Client.setCredentials({ access_token: accessToken });\r\n      localStorage.setItem(\"access_token\", `${accessToken}|${expiration.toISOString()}`);\r\n\r\n      window.history.replaceState(null, \"\", originalPage);\r\n      this.setState({ status: 'Authenticated', expiration });\r\n    } else {\r\n      const accessTokenInfo = localStorage.getItem(\"access_token\");\r\n      var expiration: Date | null = null;\r\n      if (accessTokenInfo) {\r\n        /* The user is already authenticated. */\r\n\r\n        const accessTokenInfoParts = accessTokenInfo.split(\"|\");\r\n        accessToken = accessTokenInfoParts[0];\r\n        expiration = new Date(accessTokenInfoParts[1]);\r\n\r\n        if (expiration.getTime() < new Date().getTime() + 10 * 60 * 1000) {\r\n          expiration = null;\r\n        }\r\n      }\r\n\r\n      if (expiration != null) {\r\n        this.oAuth2Client.setCredentials({ access_token: accessToken });\r\n        this.state = { status: 'Authenticated', expiration };\r\n      } else {\r\n        /* The user is not yet authenticated or its authentication will expire in less than 10 minutes. Redirect the user to Google authentication. */\r\n\r\n        this.state = { status: 'AuthenticationNeeded' };\r\n        this.authenticate();\r\n      }\r\n    }\r\n  }\r\n\r\n  private setState = (state: AuthState) => {\r\n    this.state = state;\r\n    this.listeners.forEach(listener => listener(state));\r\n  }\r\n\r\n  public subscribe = (listener: AuthStateListener) => {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  public unsubscribe = (listener: AuthStateListener) => {\r\n    const index = this.listeners.indexOf(listener);\r\n    if (index > -1) {\r\n      this.listeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  public getState = (): AuthState => this.state;\r\n\r\n  public getOAuth2Client = (): OAuth2Client => {\r\n    return this.oAuth2Client;\r\n  }\r\n\r\n  public authenticate = () => {\r\n    console.debug(\"Auth: RedirectingToGoogle\");\r\n    this.state = { status: 'AuthenticationNeeded' };\r\n\r\n    (async () => {\r\n      // redirect the user to Google authentication\r\n\r\n      const authorizeUrl = this.oAuth2Client.generateAuthUrl({\r\n        scope,\r\n        login_hint: \"lucmoco@gmail.com\",\r\n        state: window.location.pathname + window.location.search + window.location.hash,\r\n        response_type: \"token\",\r\n      });\r\n\r\n      window.location.href = authorizeUrl;\r\n    })();\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface Window { boussoleAuthManager?: AuthManager; }\r\n}\r\n\r\nif (!window.boussoleAuthManager) {\r\n  window.boussoleAuthManager = new AuthManager();\r\n};\r\n\r\nconst authManager = window.boussoleAuthManager;\r\n\r\nexport function getAuthState() {\r\n  return authManager.getState();\r\n}\r\n\r\nexport function subscribe(listener: AuthStateListener): () => void {\r\n  authManager.subscribe(listener);\r\n  return () => {\r\n    authManager.unsubscribe(listener);\r\n  };\r\n}\r\n\r\nexport function getOAuth2Client(): OAuth2Client {\r\n  return authManager.getOAuth2Client();\r\n}\r\n\r\nexport function authenticate() {\r\n  authManager.authenticate();\r\n}","import { Model } from '../Model/model';\r\nimport { getOAuth2Client } from \"../Auth/Auth\";\r\n\r\nexport async function getData() {\r\n  var oAuth2Client = getOAuth2Client();\r\n\r\n  var fileId = window.localStorage[\"NotesFileId\"];\r\n\r\n  if (fileId == null) {\r\n    /* get parent folder */\r\n\r\n    const parentFolderQuery = new URLSearchParams({\r\n      q: \"'root' in parents and mimeType = 'application/vnd.google-apps.folder' and name = 'notes-perso-boussole'\",\r\n      fields: \"files/id\",\r\n    });\r\n\r\n    const parentFolderResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${parentFolderQuery}` });\r\n    var parentFolderId = (parentFolderResponse.data as any).files[0].id;\r\n\r\n    /* get file id */\r\n\r\n    const fileQuery = new URLSearchParams({\r\n      q: `'${parentFolderId}' in parents and name = 'notes.json'`,\r\n      fields: \"files/id\",\r\n    });\r\n\r\n    const fileResponse = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files?${fileQuery}` });\r\n    window.localStorage[\"NotesFileId\"] = fileId = (fileResponse.data as any).files[0].id;\r\n  }\r\n\r\n  /* get file content */\r\n\r\n  var fileContent = await oAuth2Client.request({ url: `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media` });\r\n  return fileContent.data as Omit<Model, \"dataStorage\">;\r\n}","import { createStore as reduxCreateStore, combineReducers, Reducer, applyMiddleware, compose, Store } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport { TaskActions, taskReducer } from './tasks'\r\nimport { Model } from '../Model/model';\r\nimport { DataStorageActions, DataStorageModel, dataStorageReducer } from './dataStorage';\r\n\r\nexport interface Action {\r\n  type: string;\r\n}\r\n\r\nexport type StoreAction = TaskActions | DataStorageActions;\r\n\r\nconst combinedReducers: Reducer<Model, StoreAction> = combineReducers<Model, StoreAction>({\r\n  tasks: taskReducer,\r\n  dataStorage: model => model || { status: \"inactive\" },\r\n});\r\n\r\nconst reducer: Reducer<Model, StoreAction> = (model, action) => {\r\n  model = combinedReducers(model, action);\r\n  model = dataStorageReducer(model, action);\r\n  return model;\r\n}\r\n\r\nexport const createStore = () => {\r\n  return reduxCreateStore(reducer, applyMiddleware(thunk));\r\n}\r\n","import { Reducer } from \"react\"\r\nimport { Model } from \"../Model/model\"\r\nimport { StoreAction, Action } from \"./store\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { getData } from \"../Services/DataStore\";\r\n\r\n// *** Model ***\r\n\r\nexport interface DataStorageModel {\r\n  status: \"fetching\" | \"saving\" | \"inactive\";\r\n  error?: any;\r\n}\r\n\r\n// *** Actions ***\r\n\r\ninterface ModelFetchingAction extends Action {\r\n  type: \"ModelFetching\";\r\n}\r\n\r\ninterface ModelFetchedAction extends Action {\r\n  type: \"ModelFetched\";\r\n  model: Omit<Model, \"dataStorage\">;\r\n}\r\n\r\ninterface ModelFetchErrorAction extends Action {\r\n  type: \"ModelFetchError\";\r\n  error: any;\r\n}\r\n\r\nexport type DataStorageActions = ModelFetchingAction | ModelFetchedAction | ModelFetchErrorAction;\r\n\r\n// *** Reducer ***\r\n\r\nexport const dataStorageReducer: Reducer<Model, StoreAction> = (model, action) => {\r\n  if (model == undefined) throw new Error(\"dataStorageReducer: Unexpected undefined model.\");\r\n\r\n  switch (action.type) {\r\n    case \"ModelFetching\": return { ...model, dataStorage: { status: \"fetching\" } };\r\n    case \"ModelFetched\": return { ...action.model, dataStorage: { status: \"inactive\" } };\r\n    case \"ModelFetchError\": return { ...model, dataStorage: { status: \"inactive\", error: action.error } };\r\n    default: return model;\r\n  }\r\n}\r\n\r\n// *** Service ***\r\n\r\nexport interface DataStorageService {\r\n  fetch: () => Promise<void>;\r\n}\r\n\r\nexport function useFetchData() {\r\n  const thunkDispatch = useDispatch<ThunkDispatch<Model, undefined, StoreAction>>();\r\n\r\n  return () => thunkDispatch(async (dispatch, getState) => {\r\n    const state = getState();\r\n    if (state.dataStorage.status !== \"inactive\") {\r\n      throw Error(\"An action is already ongoing.\");\r\n    }\r\n\r\n    dispatch({ type: \"ModelFetching\" });\r\n\r\n    try {\r\n      // todo: fetch the data\r\n      const model = await getData();\r\n      dispatch({ type: \"ModelFetched\", model });\r\n    }\r\n    catch (error) {\r\n      dispatch({ type: \"ModelFetchError\", error });\r\n    }\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { AuthState } from \"./AuthState\";\r\nimport { useState } from \"react\";\r\nimport { getAuthState, subscribe } from \"./Auth\";\r\n\r\nexport function useAuth(): AuthState {\r\n  const [state, setState] = useState(getAuthState());\r\n\r\n  React.useEffect(() => {\r\n    subscribe(setState);\r\n  }, []);\r\n\r\n  return state;\r\n}\r\n","import * as React from 'react';\r\n\r\ninterface IErrorBoundaryState {\r\n  isError: boolean;\r\n  error: React.ErrorInfo | null;\r\n}\r\n\r\nexport class ErrorBoundary extends React.Component<{}, IErrorBoundaryState> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = { isError: false, error: null };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\r\n    this.setState({ isError: true, error: errorInfo });\r\n  }\r\n\r\n  render(): any {\r\n    if (this.state.isError) {\r\n      return <div>{this.state.error!.componentStack}</div>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}","import React from \"react\";\r\nimport './AuthStatus.css';\r\nimport { AuthState } from \"../../Auth/AuthState\";\r\nimport { authenticate } from \"../../Auth/Auth\";\r\n\r\nfunction getExpirationString(expiration: Date): string {\r\n  var secondsToExpiration = Math.round((expiration.getTime() - new Date().getTime()) / 1000);\r\n  if (secondsToExpiration > 100) {\r\n    return `${Math.round(secondsToExpiration / 60)} minutes`;\r\n  } else {\r\n    return `${Math.round(secondsToExpiration)} seconds`;\r\n  }\r\n}\r\n\r\nexport function AuthStatus(props: { authState: AuthState }) {\r\n  const { authState } = props;\r\n  const expiration = authState.status == 'Authenticated' ? authState.expiration : null;\r\n\r\n  const [timeLeft, setTimeLeft] = React.useState(expiration === null ? null : getExpirationString(expiration));\r\n\r\n  React.useEffect(() => {\r\n    if (expiration === null) {\r\n      return;\r\n    }\r\n\r\n    const intervalId = setInterval(() => {\r\n      setTimeLeft(getExpirationString(expiration));\r\n    }, 1000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [expiration]);\r\n\r\n  if (expiration === null) {\r\n    return <div>Not authenticated.</div>\r\n  }\r\n\r\n  return <div className=\"authStatus\">\r\n    {authState.status}, expiration: {timeLeft}\r\n    <span className=\"authRenewButton\" onClick={authenticate}>Renew</span>\r\n  </div>;\r\n}\r\n","import React from \"react\";\r\nimport { Task } from \"../../Model/model\";\r\n\r\nexport type TaskComponent = {\r\n  task: Task;\r\n  onClick: () => void;\r\n};\r\n\r\nexport function TaskComponent(props: TaskComponent) {\r\n  return <div onClick={props.onClick} className=\"task\">{props.task.title}</div>;\r\n}","import React, { FunctionComponent } from \"react\";\r\nimport './Button.css';\r\n\r\nexport interface ButtonProps {\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button: FunctionComponent<ButtonProps> = ({ onClick, children }) => {\r\n  return <div className=\"button\" onClick={onClick}>{children}</div>;\r\n}\r\n","import React, { useState, useMemo } from \"react\";\r\nimport \"./Tasks.css\";\r\nimport { Task, TaskNoId } from \"../../Model/model\";\r\nimport { Button } from \"../Utility/Button/Button\";\r\nimport { useTaskService as useTaskService } from \"../../Store/tasks\";\r\n\r\nexport type TaskFormProps = {\r\n  task: Task | undefined;\r\n  onClose: () => void;\r\n};\r\n\r\nexport function TaskForm(props: TaskFormProps) {\r\n  const id = useMemo(() => props.task ? props.task.id : undefined, [props.task]);\r\n  const [editedTask, setEditedTask] = useState<TaskNoId>(props.task || { \"title\": \"\" });\r\n  const { createTask, updateTask } = useTaskService();\r\n\r\n  const onSave = () => {\r\n    if (id) {\r\n      updateTask(id, editedTask);\r\n    } else {\r\n      createTask(editedTask);\r\n    }\r\n    props.onClose();\r\n  }\r\n\r\n  return <div className=\"taskForm\">\r\n    Titre<br />\r\n    <input type=\"text\" value={editedTask.title} onChange={event => setEditedTask({ title: event.target.value })} />\r\n    <div>\r\n      <Button onClick={onSave}>Enregistrer</Button>\r\n      <Button onClick={props.onClose}>Fermer</Button>\r\n    </div>\r\n  </div>;\r\n}\r\n","import React from \"react\";\r\nimport \"./Tasks.css\";\r\nimport { TaskComponent } from \"./TaskComponent\";\r\nimport { TaskForm } from \"./TaskForm\";\r\nimport { Model } from \"../../Model/model\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { TaskModel } from \"../../Store/tasks\";\r\nimport { Button } from \"../Utility/Button/Button\";\r\n\r\ntype TaskFormState = {\r\n  isOpen: boolean;\r\n  taskId?: string;\r\n};\r\n\r\nexport function TaskList() {\r\n  const tasks = useSelector<Model, TaskModel>(model => model.tasks);\r\n  const [taskForm, setTaskForm] = React.useState<TaskFormState>({ isOpen: false });\r\n\r\n  /*React.useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setData(await getData());\r\n      } catch (error) {\r\n        setData(error.toString());\r\n      }\r\n    })();\r\n  }, []);*/\r\n\r\n  return <div className=\"tasks\">\r\n    {Object.keys(tasks).map(id => <TaskComponent key={id} task={tasks[id]} onClick={() => setTaskForm({ isOpen: true, taskId: id })} />)}\r\n    {\r\n      taskForm.isOpen &&\r\n      <TaskForm\r\n        task={taskForm.taskId ? tasks[taskForm.taskId] : undefined}\r\n        onClose={() => setTaskForm({ isOpen: false })}\r\n      />}\r\n    <Button onClick={() => setTaskForm({ isOpen: true, taskId: undefined })}>+</Button>\r\n  </div>;\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useLocation,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { useAuth } from '../../Auth/UseAuthHook';\r\nimport { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary';\r\nimport { AuthStatus } from '../AuthStatus/AuthStatus';\r\nimport { TaskList } from '../Tasks/TaskList';\r\nimport { Button } from '../Utility/Button/Button';\r\nimport { useFetchData } from '../../Store/dataStorage';\r\n\r\nfunction NoMatch() {\r\n  let location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      Invalid path: « {location.pathname} »\r\n    </>\r\n  );\r\n}\r\n\r\nexport const AppComponent = () => {\r\n  const authState = useAuth();\r\n\r\n  const fetchData = useFetchData();\r\n\r\n  if (authState.status === 'Error') {\r\n    return <div>Authentication failed: \"{authState.errorMessage}\"</div>\r\n  }\r\n\r\n  if (authState.status === 'AuthenticationNeeded') {\r\n    return <div>Auth required. AuthenticationNeeded...</div>\r\n  }\r\n\r\n  if (authState.status === 'TokenReceived') {\r\n    return <div>TokenReceived...</div>\r\n  }\r\n\r\n  return <div className=\"App\">\r\n    <header>\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/tasks\">Tâches</Link>\r\n      <AuthStatus authState={authState} />\r\n      <Button onClick={fetchData}>Charger</Button>\r\n    </header>\r\n    <section>\r\n      <ErrorBoundary>\r\n        <Switch>\r\n          <Route path=\"/\" exact>\r\n            Home page\r\n        </Route>\r\n          <Route path=\"/tasks\" exact>\r\n            <TaskList />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <NoMatch />\r\n          </Route>\r\n        </Switch>\r\n      </ErrorBoundary>\r\n    </section>\r\n  </div>\r\n    ;\r\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useMemo } from 'react';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { createStore } from '../../Store/store';\nimport { Provider } from 'react-redux';\nimport { AppComponent } from './AppComponent';\n\nexport const App: React.FC = () => {\n  const store = useMemo(createStore, []);\n\n  // authInfo.status == 'Authenticated'\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <AppComponent />\n      </Router>\n    </Provider>\n  );\n}"],"sourceRoot":""}